# Golang CircleCI 2.0 configuration file
# Check https://circleci.com/docs/2.0/language-go/ for more details
version: 2.1

orbs:
  win: circleci/windows@2.2.0

jobs:
  test_linux:
    docker:
      - image: circleci/golang:1.15.6
        environment:
          GOFLAGS: -mod=vendor
          TEST_RESULTS: /tmp/test-results
          BAUR_TEST_POSTGRESQL_URL: "postgres://root@localhost:5432/baur?sslmode=disable"

      - image: circleci/postgres:12
        environment:
          POSTGRES_USER: root
          POSTGRES_DB: baur
          POSTGRES_HOST_AUTH_METHOD: trust

    working_directory: ~/baur
    steps:
      - checkout

      - run:
          name: Preparing Test Environment
          command: |
            GO111MODULE=off go get github.com/jstemmer/go-junit-report

            mkdir -p ${TEST_RESULTS}

      - run:
          name: Waiting for Postgres to be ready
          command: |
            for i in `seq 1 30`; do
              nc -z localhost 5432 && echo Success && exit 0
              echo -n .
              sleep 1
            done
            echo Failed waiting for Postgres && exit 1

      - run:
          name: Run Tests
          command: |
            git config --global user.email "circleci-baurtest@example.com"
            git config --global user.name "baur"
            trap "go-junit-report <${TEST_RESULTS}/go-test.out > ${TEST_RESULTS}/go-test-report.xml" EXIT
            go test --tags=dbtest -race -v -test.timeout 1m ./... | tee ${TEST_RESULTS}/go-test.out

      - store_test_results:
          path: /tmp/test-results

  test_windows:
    executor: win/default

    environment:
      GOFLAGS: -mod=vendor
      TEST_RESULTS: ~/test-results
      BAUR_TEST_POSTGRESQL_URL: "postgres://postgres:postgres@localhost:5432/postgres?sslmode=disable"

    working_directory: ~/baur

    steps:
      - checkout

      - run:
          name: Preparing Test Environment
          command: |
            choco install golang --version=1.15.4 -y
            choco install postgresql12 --params '/Password:postgres' -y
            New-Item -ItemType Directory -Force -Path $Env:TEST_RESULTS

      - run:
          name: Run Tests
          command: |
            $go111module = $Env:GO111MODULE
            $Env:GO111MODULE="off"
            go get github.com/jstemmer/go-junit-report
            $Env:GO111MODULE=$go111module
            git config --global user.email "circleci-baurtest@example.com"
            git config --global user.name "baur"
            $testResultDir = Resolve-Path $Env:TEST_RESULTS
            $testOutputPath = Join-Path $testResultDir "go-test.out"
            $testReportPath = Join-Path $testResultDir "go-test-report.xml"
            try { go test --tags=dbtest -v -timeout 5m .\... | Tee-Object -FilePath $testOutputPath } `
            finally { Get-Content -Path $testOutputPath | go-junit-report > $testReportPath; `
            [System.Io.File]::ReadAllText($testReportPath) | Out-File -FilePath $testReportPath -Encoding utf8 }

      - store_test_results:
          path: ~\test-results

  build_linux:
    docker:
      - image: circleci/golang:1.15.6

    working_directory: ~/baur
    steps:
      - checkout

      - run:
          name: Building baur
          command: make baur

  static_analysis_linux:
    docker:
      - image: golangci/golangci-lint:v1.35.2

    working_directory: ~/baur
    steps:
      - checkout

      - run:
          name: Running Static Code Analysis
          command: golangci-lint run

workflows:
  version: 2.1
  workflow:
    jobs:
      - build_linux
      - test_linux
      - test_windows
      - static_analysis_linux
